import{_ as s,r as a,o as i,c as o,a as t,b as n,d as c,w as r,e as p}from"./app.e4b6e09b.js";const l={},d=p(`<h2 id="vmware-blockchain-ethers-extension" tabindex="-1"><a class="header-anchor" href="#vmware-blockchain-ethers-extension" aria-hidden="true">#</a> VMware Blockchain Ethers Extension</h2><ul><li>This is an extension of ethers (https://github.com/ethers-io/ethers.js)</li><li>Usage in all aspects remains same, except there is an introduction of new Provider, <code>VmbcJsonRpcProvider</code></li><li><code>VmbcJsonRpcProvider</code> is an extension of <code>JsonRpcProvider</code></li><li>Introduces a new function i.e <code>setSigningKey()</code> which can receive signing key to enable read permissioning</li><li>Following usage guide provides an example of usage of provider and its newly introduced function</li></ul><h3 id="usage-guide" tabindex="-1"><a class="header-anchor" href="#usage-guide" aria-hidden="true">#</a> Usage Guide</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Using ethers-extension</span>
<span class="token keyword">const</span> ethers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@vmware-blockchain/ethers-extension&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Creating an object of VmbcJsonRpcProvider</span>
providerVmbc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers<span class="token punctuation">.</span>providers<span class="token punctuation">.</span>VmbcJsonRpcProvider</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:8545&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Setting signing key for the provider for communicating with VMware Blockchain which has read permissioning enabled</span>
providerVmbc<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">readPermissioningKeyOrEnable</span><span class="token operator">:</span> <span class="token string">&quot;0xf61ac24a7d0af636dbdee18a146afda453df2118e95ff765dbf843620f931722&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function u(m,h){const e=a("RouterLink");return i(),o("div",null,[d,t("p",null,[n("For more information about Permissioning and Read Permissioning refer to documentation of "),c(e,{to:"/permissioning/"},{default:r(()=>[n("Permissioning")]),_:1})])])}const v=s(l,[["render",u],["__file","index.html.vue"]]);export{v as default};
