import{_ as a,r as s,o,c as d,a as t,b as e,d as n,e as c}from"./app.e4b6e09b.js";const i={},h=t("h1",{id:"vmware-blockchain-supported-ethereum-json-rpc-api-endpoints",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#vmware-blockchain-supported-ethereum-json-rpc-api-endpoints","aria-hidden":"true"},"#"),e(" VMware Blockchain Supported Ethereum JSON RPC API Endpoints")],-1),l={href:"https://ethereum.org/en/developers/docs/apis/json-rpc",target:"_blank",rel:"noopener noreferrer"},u=c("<table><thead><tr><th>Methods</th><th>Description</th></tr></thead><tbody><tr><td>eth_accounts</td><td>Returns a list of Client node addresses.</td></tr><tr><td>eth_blockNumber</td><td>Returns the most recent block number.</td></tr><tr><td>eth_call</td><td>Executes a new message call immediately without creating a transaction on the blockchain.</td></tr><tr><td>eth_chainId (Reference is EIP-695)</td><td>Returns the current network or chain ID.</td></tr><tr><td>eth_estimateGas</td><td>Generates and returns an estimate of how much gas is required for the transaction to complete. The transaction is not added to the blockchain.</td></tr><tr><td>eth_gasPrice</td><td>Returns the current price per gas.</td></tr><tr><td>eth_getBalance</td><td>Returns the given address account balance.</td></tr><tr><td>eth_getBlockByHash</td><td>Returns the block hash.</td></tr><tr><td>eth_getBlockByNumber</td><td>Returns the block number.</td></tr><tr><td>eth_getBlockTransactionCountByHash</td><td>Returns the number of block transactions by block matching the given block.</td></tr><tr><td>eth_getBlockTransactionCountByNumber</td><td>Returns the number of block transactions by matching the given block number.</td></tr><tr><td>eth_getCode</td><td>Returns code at a given address.</td></tr><tr><td>eth_getLogs</td><td>Returns an array of all logs matching a given filter object.</td></tr><tr><td>eth_getStorageAt</td><td>Returns the value from a storage position at a given address.</td></tr><tr><td>eth_getTransactionByHash</td><td>Returns the information about a transaction requested by transaction hash.</td></tr><tr><td>eth_getTransactionCount</td><td>Returns the number of transactions sent from an address.</td></tr><tr><td>eth_getTransactionReceipt</td><td>Returns the receipt of a transaction by transaction hash.</td></tr><tr><td>eth_sendRawTransaction</td><td>Creates a message call transaction or a contract creation for signed transactions.</td></tr><tr><td>eth_subscribe</td><td>Subscribe to logs that are included in new imported blocks and match the given filter criteria. This uses the WebSocket interface.</td></tr><tr><td>eth_unsubscribe</td><td>Cancel a current subscription. This uses the WebSocket interface.</td></tr><tr><td>net_version</td><td>Returns the current network ID.</td></tr></tbody></table>",1),p=t("thead",null,[t("tr",null,[t("th",null,"Construct"),t("th",null,"Description")])],-1),_=t("td",null,"JSON RPC API Batching",-1),b={href:"https://www.jsonrpc.org/specification",target:"_blank",rel:"noopener noreferrer"},m=t("h2",{id:"limitations",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#limitations","aria-hidden":"true"},"#"),e(" Limitations")],-1),g=t("ul",null,[t("li",null,"Contract upgrades using hardhat is not supported yet")],-1);function f(k,R){const r=s("ExternalLinkIcon");return o(),d("div",null,[h,t("p",null,[e("VMware Blockchain Ethereum supports the standard interface for Ethereum clients and Enterprise Ethereum Requirements "),t("a",l,[e("API Reference"),n(r)])]),u,t("table",null,[p,t("tbody",null,[t("tr",null,[_,t("td",null,[e("Multiple requests are batched into a single JSON object aligning with "),t("a",b,[e("Ethereum JSON RPC Standard"),n(r)]),e(" for optimizing the platform's performance.")])])])]),m,g])}const v=a(i,[["render",f],["__file","supported-apis.html.vue"]]);export{v as default};
